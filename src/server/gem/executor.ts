import { doc, updateDoc, arrayUnion } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { log } from '@/server/log';
import { ExecutionPlan } from './planner';

/**
 * Simulates the execution of a plan generated by the AI Planner.
 * In a real production environment, this would be a durable Cloud Function
 * that could be triggered by a new document in the 'jobs' collection.
 *
 * @param userId The ID of the user who owns the job.
 * @param jobId The ID of the job to execute.
 * @param plan The execution plan for the job.
 */
export async function executePlan(userId: string, jobId: string, plan: ExecutionPlan) {
  const jobRef = doc(db, 'users', userId, 'jobs', jobId);

  log.info(`Starting execution for job ${jobId}`, { jobId });
  await updateDoc(jobRef, { status: 'processing' });

  for (let i = 0; i < plan.steps.length; i++) {
    const step = plan.steps[i];
    log.info(`Executing step ${i + 1}/${plan.steps.length}: ${step.description}`, { jobId, toolId: step.toolId });

    // Simulate the time it takes for the tool to run
    await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));

    // Update the step status in Firestore
    await updateDoc(jobRef, {
      [`steps.${i}.status`]: 'completed',
      currentStep: i + 1,
    });
  }

  log.info(`Execution completed for job ${jobId}`, { jobId });
  await updateDoc(jobRef, { status: 'completed' });
}